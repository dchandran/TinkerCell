/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class tinkercell {
  public static tc_matrix tc_createMatrix(int rows, int cols) {
    return new tc_matrix(tinkercellJNI.tc_createMatrix(rows, cols), true);
  }

  public static tc_table tc_createTable(int rows, int cols) {
    return new tc_table(tinkercellJNI.tc_createTable(rows, cols), true);
  }

  public static tc_strings tc_createStringsArray(int len) {
    return new tc_strings(tinkercellJNI.tc_createStringsArray(len), true);
  }

  public static tc_items tc_createItemsArray(int len) {
    return new tc_items(tinkercellJNI.tc_createItemsArray(len), true);
  }

  public static double tc_getMatrixValue(tc_matrix M, int i, int j) {
    return tinkercellJNI.tc_getMatrixValue(tc_matrix.getCPtr(M), M, i, j);
  }

  public static void tc_setMatrixValue(tc_matrix M, int i, int j, double d) {
    tinkercellJNI.tc_setMatrixValue(tc_matrix.getCPtr(M), M, i, j, d);
  }

  public static String tc_getRowName(tc_matrix M, int i) {
    return tinkercellJNI.tc_getRowName(tc_matrix.getCPtr(M), M, i);
  }

  public static void tc_setRowName(tc_matrix M, int i, String s) {
    tinkercellJNI.tc_setRowName(tc_matrix.getCPtr(M), M, i, s);
  }

  public static String tc_getColumnName(tc_matrix M, int j) {
    return tinkercellJNI.tc_getColumnName(tc_matrix.getCPtr(M), M, j);
  }

  public static void tc_setColumnName(tc_matrix M, int j, String s) {
    tinkercellJNI.tc_setColumnName(tc_matrix.getCPtr(M), M, j, s);
  }

  public static String tc_getTableValue(tc_table S, int i, int j) {
    return tinkercellJNI.tc_getTableValue(tc_table.getCPtr(S), S, i, j);
  }

  public static void tc_setTableValue(tc_table S, int i, int j, String s) {
    tinkercellJNI.tc_setTableValue(tc_table.getCPtr(S), S, i, j, s);
  }

  public static String tc_getString(tc_strings S, int i) {
    return tinkercellJNI.tc_getString(tc_strings.getCPtr(S), S, i);
  }

  public static void tc_setString(tc_strings S, int i, String c) {
    tinkercellJNI.tc_setString(tc_strings.getCPtr(S), S, i, c);
  }

  public static int tc_getItem(tc_items A, int i) {
    return tinkercellJNI.tc_getItem(tc_items.getCPtr(A), A, i);
  }

  public static void tc_setItem(tc_items A, int i, int o) {
    tinkercellJNI.tc_setItem(tc_items.getCPtr(A), A, i, o);
  }

  public static void tc_deleteMatrix(tc_matrix M) {
    tinkercellJNI.tc_deleteMatrix(tc_matrix.getCPtr(M), M);
  }

  public static void tc_deleteTable(tc_table M) {
    tinkercellJNI.tc_deleteTable(tc_table.getCPtr(M), M);
  }

  public static void tc_deleteItemsArray(tc_items A) {
    tinkercellJNI.tc_deleteItemsArray(tc_items.getCPtr(A), A);
  }

  public static void tc_deleteStringsArray(tc_strings C) {
    tinkercellJNI.tc_deleteStringsArray(tc_strings.getCPtr(C), C);
  }

  public static tc_matrix tc_appendColumns(tc_matrix A, tc_matrix B) {
    return new tc_matrix(tinkercellJNI.tc_appendColumns(tc_matrix.getCPtr(A), A, tc_matrix.getCPtr(B), B), true);
  }

  public static tc_matrix tc_appendRows(tc_matrix A, tc_matrix B) {
    return new tc_matrix(tinkercellJNI.tc_appendRows(tc_matrix.getCPtr(A), A, tc_matrix.getCPtr(B), B), true);
  }

  public static void tc_printMatrixToFile(String file, tc_matrix M) {
    tinkercellJNI.tc_printMatrixToFile(file, tc_matrix.getCPtr(M), M);
  }

  public static void tc_printOutMatrix(tc_matrix M) {
    tinkercellJNI.tc_printOutMatrix(tc_matrix.getCPtr(M), M);
  }

  public static void tc_printTableToFile(String file, tc_table M) {
    tinkercellJNI.tc_printTableToFile(file, tc_table.getCPtr(M), M);
  }

  public static void tc_printOutTable(tc_table M) {
    tinkercellJNI.tc_printOutTable(tc_table.getCPtr(M), M);
  }

  public static tc_items tc_allItems() {
    return new tc_items(tinkercellJNI.tc_allItems(), true);
  }

  public static tc_items tc_selectedItems() {
    return new tc_items(tinkercellJNI.tc_selectedItems(), true);
  }

  public static tc_items tc_itemsOfFamily(String family) {
    return new tc_items(tinkercellJNI.tc_itemsOfFamily(family), true);
  }

  public static tc_items tc_itemsOfFamilyFrom(String family, tc_items itemsToSelectFrom) {
    return new tc_items(tinkercellJNI.tc_itemsOfFamilyFrom(family, tc_items.getCPtr(itemsToSelectFrom), itemsToSelectFrom), true);
  }

  public static int tc_find(String name) {
    return tinkercellJNI.tc_find(name);
  }

  public static tc_items tc_findItems(tc_strings names) {
    return new tc_items(tinkercellJNI.tc_findItems(tc_strings.getCPtr(names), names), true);
  }

  public static void tc_select(int item) {
    tinkercellJNI.tc_select(item);
  }

  public static void tc_deselect() {
    tinkercellJNI.tc_deselect();
  }

  public static String tc_getName(int item) {
    return tinkercellJNI.tc_getName(item);
  }

  public static String tc_getUniqueName(int item) {
    return tinkercellJNI.tc_getUniqueName(item);
  }

  public static void tc_rename(int item, String name) {
    tinkercellJNI.tc_rename(item, name);
  }

  public static tc_strings tc_getNames(tc_items items) {
    return new tc_strings(tinkercellJNI.tc_getNames(tc_items.getCPtr(items), items), true);
  }

  public static tc_strings tc_getUniqueNames(tc_items items) {
    return new tc_strings(tinkercellJNI.tc_getUniqueNames(tc_items.getCPtr(items), items), true);
  }

  public static String tc_getFamily(int item) {
    return tinkercellJNI.tc_getFamily(item);
  }

  public static int tc_isA(int item, String family) {
    return tinkercellJNI.tc_isA(item, family);
  }

  public static void tc_print(String text) {
    tinkercellJNI.tc_print(text);
  }

  public static void tc_errorReport(String text) {
    tinkercellJNI.tc_errorReport(text);
  }

  public static void tc_printMatrix(tc_matrix data) {
    tinkercellJNI.tc_printMatrix(tc_matrix.getCPtr(data), data);
  }

  public static void tc_printFile(String filename) {
    tinkercellJNI.tc_printFile(filename);
  }

  public static void tc_clear() {
    tinkercellJNI.tc_clear();
  }

  public static void tc_remove(int item) {
    tinkercellJNI.tc_remove(item);
  }

  public static double tc_getY(int item) {
    return tinkercellJNI.tc_getY(item);
  }

  public static double tc_getX(int item) {
    return tinkercellJNI.tc_getX(item);
  }

  public static tc_matrix tc_getPos(tc_items items) {
    return new tc_matrix(tinkercellJNI.tc_getPos(tc_items.getCPtr(items), items), true);
  }

  public static void tc_setPos(int item, double x, double y) {
    tinkercellJNI.tc_setPos(item, x, y);
  }

  public static void tc_setPosMulti(tc_items items, tc_matrix positions) {
    tinkercellJNI.tc_setPosMulti(tc_items.getCPtr(items), items, tc_matrix.getCPtr(positions), positions);
  }

  public static void tc_moveSelected(double dx, double dy) {
    tinkercellJNI.tc_moveSelected(dx, dy);
  }

  public static int tc_isWindows() {
    return tinkercellJNI.tc_isWindows();
  }

  public static int tc_isMac() {
    return tinkercellJNI.tc_isMac();
  }

  public static int tc_isLinux() {
    return tinkercellJNI.tc_isLinux();
  }

  public static String tc_appDir() {
    return tinkercellJNI.tc_appDir();
  }

  public static String tc_homeDir() {
    return tinkercellJNI.tc_homeDir();
  }

  public static void tc_createInputWindowForScript(tc_matrix input, String title, String functionname) {
    tinkercellJNI.tc_createInputWindowForScript(tc_matrix.getCPtr(input), input, title, functionname);
  }

  public static void tc_createInputWindow(tc_matrix input, String title, SWIGTYPE_p_f_tc_matrix__void f) {
    tinkercellJNI.tc_createInputWindow(tc_matrix.getCPtr(input), input, title, SWIGTYPE_p_f_tc_matrix__void.getCPtr(f));
  }

  public static void tc_addInputWindowOptions(String title, int i, int j, tc_strings options) {
    tinkercellJNI.tc_addInputWindowOptions(title, i, j, tc_strings.getCPtr(options), options);
  }

  public static void tc_addInputWindowCheckbox(String title, int i, int j) {
    tinkercellJNI.tc_addInputWindowCheckbox(title, i, j);
  }

  public static void tc_openNewWindow(String title) {
    tinkercellJNI.tc_openNewWindow(title);
  }

  public static tc_items tc_getChildren(int o) {
    return new tc_items(tinkercellJNI.tc_getChildren(o), true);
  }

  public static int tc_getParent(int o) {
    return tinkercellJNI.tc_getParent(o);
  }

  public static tc_matrix tc_getNumericalData(int item, String data) {
    return new tc_matrix(tinkercellJNI.tc_getNumericalData(item, data), true);
  }

  public static void tc_setNumericalData(int o, String title, tc_matrix data) {
    tinkercellJNI.tc_setNumericalData(o, title, tc_matrix.getCPtr(data), data);
  }

  public static tc_table tc_getTextData(int item, String data) {
    return new tc_table(tinkercellJNI.tc_getTextData(item, data), true);
  }

  public static void tc_setTextData(int o, String title, tc_table data) {
    tinkercellJNI.tc_setTextData(o, title, tc_table.getCPtr(data), data);
  }

  public static tc_strings tc_getNumericalDataNames(int o) {
    return new tc_strings(tinkercellJNI.tc_getNumericalDataNames(o), true);
  }

  public static tc_strings tc_getTextDataNames(int o) {
    return new tc_strings(tinkercellJNI.tc_getTextDataNames(o), true);
  }

  public static void tc_zoom(double factor) {
    tinkercellJNI.tc_zoom(factor);
  }

  public static String tc_getStringDialog(String title) {
    return tinkercellJNI.tc_getStringDialog(title);
  }

  public static String tc_getFilename() {
    return tinkercellJNI.tc_getFilename();
  }

  public static int tc_getStringFromList(String title, tc_strings list, String selectedString) {
    return tinkercellJNI.tc_getStringFromList(title, tc_strings.getCPtr(list), list, selectedString);
  }

  public static double tc_getNumber(String title) {
    return tinkercellJNI.tc_getNumber(title);
  }

  public static void tc_getNumbers(tc_strings labels, SWIGTYPE_p_double result) {
    tinkercellJNI.tc_getNumbers(tc_strings.getCPtr(labels), labels, SWIGTYPE_p_double.getCPtr(result));
  }

  public static int tc_askQuestion(String message) {
    return tinkercellJNI.tc_askQuestion(message);
  }

  public static void tc_messageDialog(String message) {
    tinkercellJNI.tc_messageDialog(message);
  }

  public static void tc_openFile(String file) {
    tinkercellJNI.tc_openFile(file);
  }

  public static void tc_saveToFile(String file) {
    tinkercellJNI.tc_saveToFile(file);
  }

  public static int tc_thisThread() {
    return tinkercellJNI.tc_thisThread();
  }

  public static void tc_createSliders(tc_matrix input, SWIGTYPE_p_f_tc_matrix__void f) {
    tinkercellJNI.tc_createSliders(tc_matrix.getCPtr(input), input, SWIGTYPE_p_f_tc_matrix__void.getCPtr(f));
  }

  public static String tc_getColor(int item) {
    return tinkercellJNI.tc_getColor(item);
  }

  public static void tc_setColor(int item, String name, int permanent) {
    tinkercellJNI.tc_setColor(item, name, permanent);
  }

  public static void tc_changeNodeImage(int item, String filename) {
    tinkercellJNI.tc_changeNodeImage(item, filename);
  }

  public static void tc_changeArrowHead(int connection, String filename) {
    tinkercellJNI.tc_changeArrowHead(connection, filename);
  }

  public static void tc_setSize(int item, double width, double height) {
    tinkercellJNI.tc_setSize(item, width, height);
  }

  public static double tc_getWidth(int item) {
    return tinkercellJNI.tc_getWidth(item);
  }

  public static double tc_getHeight(int item) {
    return tinkercellJNI.tc_getHeight(item);
  }

  public static void tc_rotate(int item, double t) {
    tinkercellJNI.tc_rotate(item, t);
  }

  public static void tc_screenshot(String filename, int width, int height) {
    tinkercellJNI.tc_screenshot(filename, width, height);
  }

  public static int tc_screenWidth() {
    return tinkercellJNI.tc_screenWidth();
  }

  public static int tc_screenHeight() {
    return tinkercellJNI.tc_screenHeight();
  }

  public static int tc_screenX() {
    return tinkercellJNI.tc_screenX();
  }

  public static int tc_screenY() {
    return tinkercellJNI.tc_screenY();
  }

  public static String tc_annotations() {
    return tinkercellJNI.tc_annotations();
  }

  public static void tc_insertAnnotations(String arg0, double arg1, double arg2) {
    tinkercellJNI.tc_insertAnnotations(arg0, arg1, arg2);
  }

  public static void tc_Main_api_initialize(SWIGTYPE_p_f___tc_items tc_allItems0, SWIGTYPE_p_f___tc_items tc_selectedItems0, SWIGTYPE_p_f_p_q_const__char__tc_items tc_itemsOfFamily0, SWIGTYPE_p_f_p_q_const__char_tc_items__tc_items tc_itemsOfFamily1, SWIGTYPE_p_f_p_q_const__char__long tc_find0, SWIGTYPE_p_f_tc_strings__tc_items tc_findItems0, SWIGTYPE_p_f_long__void tc_select0, SWIGTYPE_p_f___void tc_deselect0, SWIGTYPE_p_f_long__p_char tc_getName0, SWIGTYPE_p_f_long__p_char tc_getUniqueName0, SWIGTYPE_p_f_long_p_q_const__char__void tc_setName0, SWIGTYPE_p_f_tc_items__tc_strings tc_getNames0, SWIGTYPE_p_f_tc_items__tc_strings tc_getUniqueNames0, SWIGTYPE_p_f_long__p_char tc_getFamily0, SWIGTYPE_p_f_long_p_q_const__char__int tc_isA0, SWIGTYPE_p_f___void tc_clearText, SWIGTYPE_p_f_p_q_const__char__void tc_outputText0, SWIGTYPE_p_f_p_q_const__char__void tc_errorReport0, SWIGTYPE_p_f_tc_matrix__void tc_outputTable0, SWIGTYPE_p_f_p_q_const__char__void tc_printFile0, SWIGTYPE_p_f_long__void tc_removeItem0, SWIGTYPE_p_f_long__double tc_getY0, SWIGTYPE_p_f_long__double tc_getX0, SWIGTYPE_p_f_tc_items__tc_matrix tc_getPos0, SWIGTYPE_p_f_long_double_double__void tc_setPos0, SWIGTYPE_p_f_tc_items_tc_matrix__void tc_setPos1, SWIGTYPE_p_f_double_double__void tc_moveSelected0, SWIGTYPE_p_f___int tc_isWindows0, SWIGTYPE_p_f___int tc_isMac0, SWIGTYPE_p_f___int tc_isLinux0, SWIGTYPE_p_f___p_char tc_appDir0, SWIGTYPE_p_f___p_char tc_homeDir0, SWIGTYPE_p_f_tc_matrix_p_q_const__char_p_q_const__char__void tc_createInputWindow0, SWIGTYPE_p_f_long_tc_matrix_p_q_const__char_p_f_tc_matrix__void__void tc_createInputWindow1, SWIGTYPE_p_f_long_tc_matrix_p_f_tc_matrix__void__void createSliders, SWIGTYPE_p_f_p_q_const__char_int_int_tc_strings__void tc_addInputWindowOptions0, SWIGTYPE_p_f_p_q_const__char_int_int__void tc_addInputWindowCheckbox0, SWIGTYPE_p_f_p_q_const__char__void tc_openNewWindow0, SWIGTYPE_p_f_long__tc_items tc_getChildren0, SWIGTYPE_p_f_long__long tc_getParent0, SWIGTYPE_p_f_long_p_q_const__char__tc_matrix tc_getNumericalData0, SWIGTYPE_p_f_long_p_q_const__char_tc_matrix__void tc_setNumericalData0, SWIGTYPE_p_f_long_p_q_const__char__tc_table tc_getTextData0, SWIGTYPE_p_f_long_p_q_const__char_tc_table__void tc_setTextData0, SWIGTYPE_p_f_long__tc_strings tc_getNumericalDataNames0, SWIGTYPE_p_f_long__tc_strings tc_getTextDataNames0, SWIGTYPE_p_f_double__void tc_zoom0, SWIGTYPE_p_f_p_q_const__char__p_char tc_getStringDialog0, SWIGTYPE_p_f_p_q_const__char_tc_strings_p_q_const__char__int getSelectedString, SWIGTYPE_p_f_p_q_const__char__double getNumber, SWIGTYPE_p_f_tc_strings_p_double__void getNumbers, SWIGTYPE_p_f___p_char getFilename, SWIGTYPE_p_f_p_q_const__char__int askQuestion, SWIGTYPE_p_f_p_q_const__char__void messageDialog, SWIGTYPE_p_f_p_q_const__char__void openFile, SWIGTYPE_p_f_p_q_const__char__void saveToFile, SWIGTYPE_p_f_long_double_double_int__void setSize0, SWIGTYPE_p_f_long__double getWidth0, SWIGTYPE_p_f_long__double getHeight0, SWIGTYPE_p_f_long_double_int__void setAngle0, SWIGTYPE_p_f_long__p_char getColor, SWIGTYPE_p_f_long_p_q_const__char_int__void setColor0, SWIGTYPE_p_f_long_p_q_const__char__void changeGraphics0, SWIGTYPE_p_f_long_p_q_const__char__void changeArrowHead0, SWIGTYPE_p_f_p_q_const__char_int_int__void screenshot, SWIGTYPE_p_f___int screenHeight, SWIGTYPE_p_f___int screenWidth, SWIGTYPE_p_f___int screenX, SWIGTYPE_p_f___int screenY, SWIGTYPE_p_f___p_char tc_annotations, SWIGTYPE_p_f_p_q_const__char_double_double__void insertAnnotations) {
    tinkercellJNI.tc_Main_api_initialize(SWIGTYPE_p_f___tc_items.getCPtr(tc_allItems0), SWIGTYPE_p_f___tc_items.getCPtr(tc_selectedItems0), SWIGTYPE_p_f_p_q_const__char__tc_items.getCPtr(tc_itemsOfFamily0), SWIGTYPE_p_f_p_q_const__char_tc_items__tc_items.getCPtr(tc_itemsOfFamily1), SWIGTYPE_p_f_p_q_const__char__long.getCPtr(tc_find0), SWIGTYPE_p_f_tc_strings__tc_items.getCPtr(tc_findItems0), SWIGTYPE_p_f_long__void.getCPtr(tc_select0), SWIGTYPE_p_f___void.getCPtr(tc_deselect0), SWIGTYPE_p_f_long__p_char.getCPtr(tc_getName0), SWIGTYPE_p_f_long__p_char.getCPtr(tc_getUniqueName0), SWIGTYPE_p_f_long_p_q_const__char__void.getCPtr(tc_setName0), SWIGTYPE_p_f_tc_items__tc_strings.getCPtr(tc_getNames0), SWIGTYPE_p_f_tc_items__tc_strings.getCPtr(tc_getUniqueNames0), SWIGTYPE_p_f_long__p_char.getCPtr(tc_getFamily0), SWIGTYPE_p_f_long_p_q_const__char__int.getCPtr(tc_isA0), SWIGTYPE_p_f___void.getCPtr(tc_clearText), SWIGTYPE_p_f_p_q_const__char__void.getCPtr(tc_outputText0), SWIGTYPE_p_f_p_q_const__char__void.getCPtr(tc_errorReport0), SWIGTYPE_p_f_tc_matrix__void.getCPtr(tc_outputTable0), SWIGTYPE_p_f_p_q_const__char__void.getCPtr(tc_printFile0), SWIGTYPE_p_f_long__void.getCPtr(tc_removeItem0), SWIGTYPE_p_f_long__double.getCPtr(tc_getY0), SWIGTYPE_p_f_long__double.getCPtr(tc_getX0), SWIGTYPE_p_f_tc_items__tc_matrix.getCPtr(tc_getPos0), SWIGTYPE_p_f_long_double_double__void.getCPtr(tc_setPos0), SWIGTYPE_p_f_tc_items_tc_matrix__void.getCPtr(tc_setPos1), SWIGTYPE_p_f_double_double__void.getCPtr(tc_moveSelected0), SWIGTYPE_p_f___int.getCPtr(tc_isWindows0), SWIGTYPE_p_f___int.getCPtr(tc_isMac0), SWIGTYPE_p_f___int.getCPtr(tc_isLinux0), SWIGTYPE_p_f___p_char.getCPtr(tc_appDir0), SWIGTYPE_p_f___p_char.getCPtr(tc_homeDir0), SWIGTYPE_p_f_tc_matrix_p_q_const__char_p_q_const__char__void.getCPtr(tc_createInputWindow0), SWIGTYPE_p_f_long_tc_matrix_p_q_const__char_p_f_tc_matrix__void__void.getCPtr(tc_createInputWindow1), SWIGTYPE_p_f_long_tc_matrix_p_f_tc_matrix__void__void.getCPtr(createSliders), SWIGTYPE_p_f_p_q_const__char_int_int_tc_strings__void.getCPtr(tc_addInputWindowOptions0), SWIGTYPE_p_f_p_q_const__char_int_int__void.getCPtr(tc_addInputWindowCheckbox0), SWIGTYPE_p_f_p_q_const__char__void.getCPtr(tc_openNewWindow0), SWIGTYPE_p_f_long__tc_items.getCPtr(tc_getChildren0), SWIGTYPE_p_f_long__long.getCPtr(tc_getParent0), SWIGTYPE_p_f_long_p_q_const__char__tc_matrix.getCPtr(tc_getNumericalData0), SWIGTYPE_p_f_long_p_q_const__char_tc_matrix__void.getCPtr(tc_setNumericalData0), SWIGTYPE_p_f_long_p_q_const__char__tc_table.getCPtr(tc_getTextData0), SWIGTYPE_p_f_long_p_q_const__char_tc_table__void.getCPtr(tc_setTextData0), SWIGTYPE_p_f_long__tc_strings.getCPtr(tc_getNumericalDataNames0), SWIGTYPE_p_f_long__tc_strings.getCPtr(tc_getTextDataNames0), SWIGTYPE_p_f_double__void.getCPtr(tc_zoom0), SWIGTYPE_p_f_p_q_const__char__p_char.getCPtr(tc_getStringDialog0), SWIGTYPE_p_f_p_q_const__char_tc_strings_p_q_const__char__int.getCPtr(getSelectedString), SWIGTYPE_p_f_p_q_const__char__double.getCPtr(getNumber), SWIGTYPE_p_f_tc_strings_p_double__void.getCPtr(getNumbers), SWIGTYPE_p_f___p_char.getCPtr(getFilename), SWIGTYPE_p_f_p_q_const__char__int.getCPtr(askQuestion), SWIGTYPE_p_f_p_q_const__char__void.getCPtr(messageDialog), SWIGTYPE_p_f_p_q_const__char__void.getCPtr(openFile), SWIGTYPE_p_f_p_q_const__char__void.getCPtr(saveToFile), SWIGTYPE_p_f_long_double_double_int__void.getCPtr(setSize0), SWIGTYPE_p_f_long__double.getCPtr(getWidth0), SWIGTYPE_p_f_long__double.getCPtr(getHeight0), SWIGTYPE_p_f_long_double_int__void.getCPtr(setAngle0), SWIGTYPE_p_f_long__p_char.getCPtr(getColor), SWIGTYPE_p_f_long_p_q_const__char_int__void.getCPtr(setColor0), SWIGTYPE_p_f_long_p_q_const__char__void.getCPtr(changeGraphics0), SWIGTYPE_p_f_long_p_q_const__char__void.getCPtr(changeArrowHead0), SWIGTYPE_p_f_p_q_const__char_int_int__void.getCPtr(screenshot), SWIGTYPE_p_f___int.getCPtr(screenHeight), SWIGTYPE_p_f___int.getCPtr(screenWidth), SWIGTYPE_p_f___int.getCPtr(screenX), SWIGTYPE_p_f___int.getCPtr(screenY), SWIGTYPE_p_f___p_char.getCPtr(tc_annotations), SWIGTYPE_p_f_p_q_const__char_double_double__void.getCPtr(insertAnnotations));
  }

  public static void tc_showProgress(int progress) {
    tinkercellJNI.tc_showProgress(progress);
  }

  public static void tc_callback(SWIGTYPE_p_f_void__void f) {
    tinkercellJNI.tc_callback(SWIGTYPE_p_f_void__void.getCPtr(f));
  }

  public static void tc_callWhenExiting(SWIGTYPE_p_f_void__void f) {
    tinkercellJNI.tc_callWhenExiting(SWIGTYPE_p_f_void__void.getCPtr(f));
  }

  public static void tc_CThread_api_initialize(int cthread, SWIGTYPE_p_f_long_p_f_void__void__void callback, SWIGTYPE_p_f_long_p_f_void__void__void callWhenExiting, SWIGTYPE_p_f_long_int__void showProgress) {
    tinkercellJNI.tc_CThread_api_initialize(cthread, SWIGTYPE_p_f_long_p_f_void__void__void.getCPtr(callback), SWIGTYPE_p_f_long_p_f_void__void__void.getCPtr(callWhenExiting), SWIGTYPE_p_f_long_int__void.getCPtr(showProgress));
  }

  public static tc_matrix tc_getParameters(tc_items a) {
    return new tc_matrix(tinkercellJNI.tc_getParameters(tc_items.getCPtr(a), a), true);
  }

  public static tc_matrix tc_getInitialValues(tc_items a) {
    return new tc_matrix(tinkercellJNI.tc_getInitialValues(tc_items.getCPtr(a), a), true);
  }

  public static void tc_setInitialValues(tc_items items, tc_matrix values) {
    tinkercellJNI.tc_setInitialValues(tc_items.getCPtr(items), items, tc_matrix.getCPtr(values), values);
  }

  public static tc_matrix tc_getFixedVariables(tc_items a) {
    return new tc_matrix(tinkercellJNI.tc_getFixedVariables(tc_items.getCPtr(a), a), true);
  }

  public static tc_matrix tc_getParametersAndFixedVariables(tc_items a) {
    return new tc_matrix(tinkercellJNI.tc_getParametersAndFixedVariables(tc_items.getCPtr(a), a), true);
  }

  public static String tc_getTextAttribute(int item, String attribute) {
    return tinkercellJNI.tc_getTextAttribute(item, attribute);
  }

  public static double tc_getParameter(int item, String attribute) {
    return tinkercellJNI.tc_getParameter(item, attribute);
  }

  public static tc_matrix tc_getParametersNamed(tc_items a, tc_strings attibutes) {
    return new tc_matrix(tinkercellJNI.tc_getParametersNamed(tc_items.getCPtr(a), a, tc_strings.getCPtr(attibutes), attibutes), true);
  }

  public static tc_matrix tc_getParametersExcept(tc_items a, tc_strings attributes) {
    return new tc_matrix(tinkercellJNI.tc_getParametersExcept(tc_items.getCPtr(a), a, tc_strings.getCPtr(attributes), attributes), true);
  }

  public static tc_strings tc_getAllTextNamed(tc_items a, tc_strings attributes) {
    return new tc_strings(tinkercellJNI.tc_getAllTextNamed(tc_items.getCPtr(a), a, tc_strings.getCPtr(attributes), attributes), true);
  }

  public static void tc_setTextAttribute(int item, String attribute, String value) {
    tinkercellJNI.tc_setTextAttribute(item, attribute, value);
  }

  public static void tc_setParameter(int item, String attribute, double value) {
    tinkercellJNI.tc_setParameter(item, attribute, value);
  }

  public static void tc_BasicInformationTool_Text_api(SWIGTYPE_p_f_long_p_q_const__char__p_char getTextData, SWIGTYPE_p_f_tc_items_tc_strings__tc_strings getAllTextDataNamed, SWIGTYPE_p_f_long_p_q_const__char_p_q_const__char__void setTextData) {
    tinkercellJNI.tc_BasicInformationTool_Text_api(SWIGTYPE_p_f_long_p_q_const__char__p_char.getCPtr(getTextData), SWIGTYPE_p_f_tc_items_tc_strings__tc_strings.getCPtr(getAllTextDataNamed), SWIGTYPE_p_f_long_p_q_const__char_p_q_const__char__void.getCPtr(setTextData));
  }

  public static void tc_BasicInformationTool_Numeric_api(SWIGTYPE_p_f_tc_items__tc_matrix getInitialValues, SWIGTYPE_p_f_tc_items_tc_matrix__void setInitialValues, SWIGTYPE_p_f_tc_items__tc_matrix getParameters, SWIGTYPE_p_f_tc_items__tc_matrix getFixedVariabes, SWIGTYPE_p_f_tc_items__tc_matrix getParametersAndFixedVariabes, SWIGTYPE_p_f_long_p_q_const__char__double getNumericalData, SWIGTYPE_p_f_tc_items_tc_strings__tc_matrix getParametersNamed, SWIGTYPE_p_f_tc_items_tc_strings__tc_matrix getParametersExcept, SWIGTYPE_p_f_long_p_q_const__char_double__void setNumericalData) {
    tinkercellJNI.tc_BasicInformationTool_Numeric_api(SWIGTYPE_p_f_tc_items__tc_matrix.getCPtr(getInitialValues), SWIGTYPE_p_f_tc_items_tc_matrix__void.getCPtr(setInitialValues), SWIGTYPE_p_f_tc_items__tc_matrix.getCPtr(getParameters), SWIGTYPE_p_f_tc_items__tc_matrix.getCPtr(getFixedVariabes), SWIGTYPE_p_f_tc_items__tc_matrix.getCPtr(getParametersAndFixedVariabes), SWIGTYPE_p_f_long_p_q_const__char__double.getCPtr(getNumericalData), SWIGTYPE_p_f_tc_items_tc_strings__tc_matrix.getCPtr(getParametersNamed), SWIGTYPE_p_f_tc_items_tc_strings__tc_matrix.getCPtr(getParametersExcept), SWIGTYPE_p_f_long_p_q_const__char_double__void.getCPtr(setNumericalData));
  }

  public static int tc_insertConnection(tc_items parts, String name, String family) {
    return tinkercellJNI.tc_insertConnection(tc_items.getCPtr(parts), parts, name, family);
  }

  public static tc_items tc_getConnectedNodes(int connection) {
    return new tc_items(tinkercellJNI.tc_getConnectedNodes(connection), true);
  }

  public static tc_items tc_getConnectedNodesWithRole(int connection, String role) {
    return new tc_items(tinkercellJNI.tc_getConnectedNodesWithRole(connection, role), true);
  }

  public static tc_items tc_getConnections(int part) {
    return new tc_items(tinkercellJNI.tc_getConnections(part), true);
  }

  public static tc_items tc_getConnectionsWithRole(int part, String role) {
    return new tc_items(tinkercellJNI.tc_getConnectionsWithRole(part, role), true);
  }

  public static void tc_ConnectionInsertion_api(SWIGTYPE_p_f_tc_items_p_q_const__char_p_q_const__char__long insertConnection, SWIGTYPE_p_f_long__tc_items getConnectedParts, SWIGTYPE_p_f_long_p_q_const__char__tc_items getConnectedPartsWithRole, SWIGTYPE_p_f_long__tc_items getConnections, SWIGTYPE_p_f_long_p_q_const__char__tc_items getConnectionsWithRole) {
    tinkercellJNI.tc_ConnectionInsertion_api(SWIGTYPE_p_f_tc_items_p_q_const__char_p_q_const__char__long.getCPtr(insertConnection), SWIGTYPE_p_f_long__tc_items.getCPtr(getConnectedParts), SWIGTYPE_p_f_long_p_q_const__char__tc_items.getCPtr(getConnectedPartsWithRole), SWIGTYPE_p_f_long__tc_items.getCPtr(getConnections), SWIGTYPE_p_f_long_p_q_const__char__tc_items.getCPtr(getConnectionsWithRole));
  }

  public static double tc_getControlPointX(int connection, int part, int whichPoint) {
    return tinkercellJNI.tc_getControlPointX(connection, part, whichPoint);
  }

  public static double tc_getControlPointY(int connection, int part, int whichPoint) {
    return tinkercellJNI.tc_getControlPointY(connection, part, whichPoint);
  }

  public static void tc_setControlPoint(int connection, int part, int whichPoint, double x, double y) {
    tinkercellJNI.tc_setControlPoint(connection, part, whichPoint, x, y);
  }

  public static void tc_setCenterPoint(int connection, double y, double x) {
    tinkercellJNI.tc_setCenterPoint(connection, y, x);
  }

  public static double tc_getCenterPointX(int connection) {
    return tinkercellJNI.tc_getCenterPointX(connection);
  }

  public static double tc_getCenterPointY(int connection) {
    return tinkercellJNI.tc_getCenterPointY(connection);
  }

  public static void tc_setStraight(int item, int straight) {
    tinkercellJNI.tc_setStraight(item, straight);
  }

  public static void tc_setAllStraight(int straight) {
    tinkercellJNI.tc_setAllStraight(straight);
  }

  public static void tc_setLineWidth(int item, double width, int permanent) {
    tinkercellJNI.tc_setLineWidth(item, width, permanent);
  }

  public static void tc_ConnectionSelection_api(SWIGTYPE_p_f_long_long_int__double getControlPointX, SWIGTYPE_p_f_long_long_int__double getControlPointY, SWIGTYPE_p_f_long_long_int_double_double__void setControlPoint, SWIGTYPE_p_f_long_double_double__void setCenterPoint, SWIGTYPE_p_f_long__double getCenterPointX, SWIGTYPE_p_f_long__double getCenterPointY, SWIGTYPE_p_f_long_int__void setStraight, SWIGTYPE_p_f_int__void setAllStraight, SWIGTYPE_p_f_long_double_int__void setLineWidth) {
    tinkercellJNI.tc_ConnectionSelection_api(SWIGTYPE_p_f_long_long_int__double.getCPtr(getControlPointX), SWIGTYPE_p_f_long_long_int__double.getCPtr(getControlPointY), SWIGTYPE_p_f_long_long_int_double_double__void.getCPtr(setControlPoint), SWIGTYPE_p_f_long_double_double__void.getCPtr(setCenterPoint), SWIGTYPE_p_f_long__double.getCPtr(getCenterPointX), SWIGTYPE_p_f_long__double.getCPtr(getCenterPointY), SWIGTYPE_p_f_long_int__void.getCPtr(setStraight), SWIGTYPE_p_f_int__void.getCPtr(setAllStraight), SWIGTYPE_p_f_long_double_int__void.getCPtr(setLineWidth));
  }

  public static void tc_merge(tc_items parts) {
    tinkercellJNI.tc_merge(tc_items.getCPtr(parts), parts);
  }

  public static void tc_separate(int part) {
    tinkercellJNI.tc_separate(part);
  }

  public static void tc_GroupHandlerTool_api(SWIGTYPE_p_f_tc_items__void merge, SWIGTYPE_p_f_long__void separate) {
    tinkercellJNI.tc_GroupHandlerTool_api(SWIGTYPE_p_f_tc_items__void.getCPtr(merge), SWIGTYPE_p_f_long__void.getCPtr(separate));
  }

  public static int tc_insert(String name, String family) {
    return tinkercellJNI.tc_insert(name, family);
  }

  public static void tc_NodeInsertion_api(SWIGTYPE_p_f_p_q_const__char_p_q_const__char__long insertItem) {
    tinkercellJNI.tc_NodeInsertion_api(SWIGTYPE_p_f_p_q_const__char_p_q_const__char__long.getCPtr(insertItem));
  }

  public static tc_matrix tc_getStoichiometry(tc_items A) {
    return new tc_matrix(tinkercellJNI.tc_getStoichiometry(tc_items.getCPtr(A), A), true);
  }

  public static void tc_setStoichiometry(tc_items A, tc_matrix N) {
    tinkercellJNI.tc_setStoichiometry(tc_items.getCPtr(A), A, tc_matrix.getCPtr(N), N);
  }

  public static tc_strings tc_getRates(tc_items A) {
    return new tc_strings(tinkercellJNI.tc_getRates(tc_items.getCPtr(A), A), true);
  }

  public static void tc_setRates(tc_items A, tc_strings rates) {
    tinkercellJNI.tc_setRates(tc_items.getCPtr(A), A, tc_strings.getCPtr(rates), rates);
  }

  public static tc_matrix tc_getStoichiometryFor(int x) {
    return new tc_matrix(tinkercellJNI.tc_getStoichiometryFor(x), true);
  }

  public static String tc_getRate(int x) {
    return tinkercellJNI.tc_getRate(x);
  }

  public static void tc_setRate(int x, String r) {
    tinkercellJNI.tc_setRate(x, r);
  }

  public static void tc_setStoichiometryFor(int x, tc_matrix N) {
    tinkercellJNI.tc_setStoichiometryFor(x, tc_matrix.getCPtr(N), N);
  }

  public static void tc_StoichiometryTool_api(SWIGTYPE_p_f_tc_items__tc_matrix getStoichiometry, SWIGTYPE_p_f_tc_items_tc_matrix__void setStoichiometry, SWIGTYPE_p_f_tc_items__tc_strings getRates, SWIGTYPE_p_f_tc_items_tc_strings__void setRates) {
    tinkercellJNI.tc_StoichiometryTool_api(SWIGTYPE_p_f_tc_items__tc_matrix.getCPtr(getStoichiometry), SWIGTYPE_p_f_tc_items_tc_matrix__void.getCPtr(setStoichiometry), SWIGTYPE_p_f_tc_items__tc_strings.getCPtr(getRates), SWIGTYPE_p_f_tc_items_tc_strings__void.getCPtr(setRates));
  }

  public static int tc_compileAndRun(String command, String args) {
    return tinkercellJNI.tc_compileAndRun(command, args);
  }

  public static int tc_compileBuildLoad(String filename, String function, String title) {
    return tinkercellJNI.tc_compileBuildLoad(filename, function, title);
  }

  public static int tc_compileBuildLoadSliders(String filename, String function, String title, tc_matrix inputs) {
    return tinkercellJNI.tc_compileBuildLoadSliders(filename, function, title, tc_matrix.getCPtr(inputs), inputs);
  }

  public static void tc_runPythonCode(String code) {
    tinkercellJNI.tc_runPythonCode(code);
  }

  public static void tc_runPythonFile(String filename) {
    tinkercellJNI.tc_runPythonFile(filename);
  }

  public static void tc_addPythonPlugin(String file, String name, String description, String category, String icon) {
    tinkercellJNI.tc_addPythonPlugin(file, name, description, category, icon);
  }

  public static void tc_callFunction(String functionTitle) {
    tinkercellJNI.tc_callFunction(functionTitle);
  }

  public static void tc_loadLibrary(String filename) {
    tinkercellJNI.tc_loadLibrary(filename);
  }

  public static void tc_addFunction(SWIGTYPE_p_f___void f, String title, String description, String category, String iconFile, String target_family, int show_menu, int in_tool_menu, int make_default) {
    tinkercellJNI.tc_addFunction(SWIGTYPE_p_f___void.getCPtr(f), title, description, category, iconFile, target_family, show_menu, in_tool_menu, make_default);
  }

  public static void tc_runOctaveCode(String code) {
    tinkercellJNI.tc_runOctaveCode(code);
  }

  public static void tc_runOctaveFile(String filename) {
    tinkercellJNI.tc_runOctaveFile(filename);
  }

  public static void tc_addOctavePlugin(String file, String name, String description, String category, String icon) {
    tinkercellJNI.tc_addOctavePlugin(file, name, description, category, icon);
  }

  public static void tc_DynamicLibraryMenu_api(SWIGTYPE_p_f_p_q_const__char__void callFunction) {
    tinkercellJNI.tc_DynamicLibraryMenu_api(SWIGTYPE_p_f_p_q_const__char__void.getCPtr(callFunction));
  }

  public static void tc_LoadCLibraries_api(SWIGTYPE_p_f_p_q_const__char_p_q_const__char__int compileAndRun, SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char__int compileBuildLoad, SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char_tc_matrix__int compileBuildLoadSliders, SWIGTYPE_p_f_p_q_const__char__void loadLibrary, SWIGTYPE_p_f_p_f___void_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char_int_int_int__void addFunction) {
    tinkercellJNI.tc_LoadCLibraries_api(SWIGTYPE_p_f_p_q_const__char_p_q_const__char__int.getCPtr(compileAndRun), SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char__int.getCPtr(compileBuildLoad), SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char_tc_matrix__int.getCPtr(compileBuildLoadSliders), SWIGTYPE_p_f_p_q_const__char__void.getCPtr(loadLibrary), SWIGTYPE_p_f_p_f___void_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char_int_int_int__void.getCPtr(addFunction));
  }

  public static void tc_PythonTool_api(SWIGTYPE_p_f_p_q_const__char__void runPythonCode, SWIGTYPE_p_f_p_q_const__char__void runPythonFile, SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char__void addPythonPlugin) {
    tinkercellJNI.tc_PythonTool_api(SWIGTYPE_p_f_p_q_const__char__void.getCPtr(runPythonCode), SWIGTYPE_p_f_p_q_const__char__void.getCPtr(runPythonFile), SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char__void.getCPtr(addPythonPlugin));
  }

  public static void tc_OctaveTool_api(SWIGTYPE_p_f_p_q_const__char__void runOctaveCode, SWIGTYPE_p_f_p_q_const__char__void runOctaveFile, SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char__void addOctavePlugin) {
    tinkercellJNI.tc_OctaveTool_api(SWIGTYPE_p_f_p_q_const__char__void.getCPtr(runOctaveCode), SWIGTYPE_p_f_p_q_const__char__void.getCPtr(runOctaveFile), SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char__void.getCPtr(addOctavePlugin));
  }

  public static void tc_surface(tc_matrix z, String title) {
    tinkercellJNI.tc_surface(tc_matrix.getCPtr(z), z, title);
  }

  public static void tc_plot(tc_matrix data, String title) {
    tinkercellJNI.tc_plot(tc_matrix.getCPtr(data), data, title);
  }

  public static void tc_scatterplot(tc_matrix data, String title) {
    tinkercellJNI.tc_scatterplot(tc_matrix.getCPtr(data), data, title);
  }

  public static void tc_errorBars(tc_matrix data, String title) {
    tinkercellJNI.tc_errorBars(tc_matrix.getCPtr(data), data, title);
  }

  public static void tc_hist(tc_matrix data, String title) {
    tinkercellJNI.tc_hist(tc_matrix.getCPtr(data), data, title);
  }

  public static void tc_multiplot(int rows, int cols) {
    tinkercellJNI.tc_multiplot(rows, cols);
  }

  public static void tc_holdPlot(int on) {
    tinkercellJNI.tc_holdPlot(on);
  }

  public static void tc_clusterPlots(int clusters) {
    tinkercellJNI.tc_clusterPlots(clusters);
  }

  public static tc_matrix tc_getPlotData(int whichPlot) {
    return new tc_matrix(tinkercellJNI.tc_getPlotData(whichPlot), true);
  }

  public static void tc_gnuplot(String arg0) {
    tinkercellJNI.tc_gnuplot(arg0);
  }

  public static void tc_savePlot(String filename) {
    tinkercellJNI.tc_savePlot(filename);
  }

  public static void tc_setLogScale(int arg0) {
    tinkercellJNI.tc_setLogScale(arg0);
  }

  public static void tc_PlotTool_api(SWIGTYPE_p_f_tc_matrix_p_q_const__char__void plot, SWIGTYPE_p_f_tc_matrix_p_q_const__char__void surface, SWIGTYPE_p_f_tc_matrix_p_q_const__char__void hist, SWIGTYPE_p_f_tc_matrix_p_q_const__char__void errorBars, SWIGTYPE_p_f_tc_matrix_p_q_const__char__void scatterplot, SWIGTYPE_p_f_int_int__void multiplot, SWIGTYPE_p_f_int__void hold, SWIGTYPE_p_f_int__void enableClustering, SWIGTYPE_p_f_int__tc_matrix plotData, SWIGTYPE_p_f_p_q_const__char__void gnuplot, SWIGTYPE_p_f_p_q_const__char__void savePlotImage, SWIGTYPE_p_f_int__void logscale) {
    tinkercellJNI.tc_PlotTool_api(SWIGTYPE_p_f_tc_matrix_p_q_const__char__void.getCPtr(plot), SWIGTYPE_p_f_tc_matrix_p_q_const__char__void.getCPtr(surface), SWIGTYPE_p_f_tc_matrix_p_q_const__char__void.getCPtr(hist), SWIGTYPE_p_f_tc_matrix_p_q_const__char__void.getCPtr(errorBars), SWIGTYPE_p_f_tc_matrix_p_q_const__char__void.getCPtr(scatterplot), SWIGTYPE_p_f_int_int__void.getCPtr(multiplot), SWIGTYPE_p_f_int__void.getCPtr(hold), SWIGTYPE_p_f_int__void.getCPtr(enableClustering), SWIGTYPE_p_f_int__tc_matrix.getCPtr(plotData), SWIGTYPE_p_f_p_q_const__char__void.getCPtr(gnuplot), SWIGTYPE_p_f_p_q_const__char__void.getCPtr(savePlotImage), SWIGTYPE_p_f_int__void.getCPtr(logscale));
  }

  public static int tc_writeModel(String file, tc_items items) {
    return tinkercellJNI.tc_writeModel(file, tc_items.getCPtr(items), items);
  }

  public static void tc_ModelFileGenerator_api(SWIGTYPE_p_f_p_q_const__char_tc_items__int modelgen) {
    tinkercellJNI.tc_ModelFileGenerator_api(SWIGTYPE_p_f_p_q_const__char_tc_items__int.getCPtr(modelgen));
  }

  public static tc_strings tc_getEventTriggers() {
    return new tc_strings(tinkercellJNI.tc_getEventTriggers(), true);
  }

  public static tc_strings tc_getEventResponses() {
    return new tc_strings(tinkercellJNI.tc_getEventResponses(), true);
  }

  public static void tc_addEvent(String trigger, String event) {
    tinkercellJNI.tc_addEvent(trigger, event);
  }

  public static void tc_SimulationEventsTool_api(SWIGTYPE_p_f___tc_strings getEventTriggers, SWIGTYPE_p_f___tc_strings getEventResponses, SWIGTYPE_p_f_p_q_const__char_p_q_const__char__void addEvent) {
    tinkercellJNI.tc_SimulationEventsTool_api(SWIGTYPE_p_f___tc_strings.getCPtr(getEventTriggers), SWIGTYPE_p_f___tc_strings.getCPtr(getEventResponses), SWIGTYPE_p_f_p_q_const__char_p_q_const__char__void.getCPtr(addEvent));
  }

  public static tc_strings tc_getForcingFunctionNames(tc_items a) {
    return new tc_strings(tinkercellJNI.tc_getForcingFunctionNames(tc_items.getCPtr(a), a), true);
  }

  public static tc_strings tc_getForcingFunctionAssignments(tc_items a) {
    return new tc_strings(tinkercellJNI.tc_getForcingFunctionAssignments(tc_items.getCPtr(a), a), true);
  }

  public static void tc_addForcingFunction(int item, String variable, String formula) {
    tinkercellJNI.tc_addForcingFunction(item, variable, formula);
  }

  public static void tc_AssignmentFunctionsTool_api(SWIGTYPE_p_f_tc_items__tc_strings getForcingFunctionNames, SWIGTYPE_p_f_tc_items__tc_strings getForcingFunctionAssignments, SWIGTYPE_p_f_long_p_q_const__char_p_q_const__char__void addForcingFunction) {
    tinkercellJNI.tc_AssignmentFunctionsTool_api(SWIGTYPE_p_f_tc_items__tc_strings.getCPtr(getForcingFunctionNames), SWIGTYPE_p_f_tc_items__tc_strings.getCPtr(getForcingFunctionAssignments), SWIGTYPE_p_f_long_p_q_const__char_p_q_const__char__void.getCPtr(addForcingFunction));
  }

  public static void tc_displayText(int item, String text) {
    tinkercellJNI.tc_displayText(item, text);
  }

  public static void tc_displayNumber(int item, double number) {
    tinkercellJNI.tc_displayNumber(item, number);
  }

  public static void tc_setDisplayLabelColor(String color1, String color2) {
    tinkercellJNI.tc_setDisplayLabelColor(color1, color2);
  }

  public static void tc_highlight(int item, String color) {
    tinkercellJNI.tc_highlight(item, color);
  }

  public static void tc_CLabelsTool_api(SWIGTYPE_p_f_long_p_q_const__char__void displayText, SWIGTYPE_p_f_long_double__void displayNumber, SWIGTYPE_p_f_p_q_const__char_p_q_const__char__void setDisplayLabelColor, SWIGTYPE_p_f_long_p_q_const__char__void highlight) {
    tinkercellJNI.tc_CLabelsTool_api(SWIGTYPE_p_f_long_p_q_const__char__void.getCPtr(displayText), SWIGTYPE_p_f_long_double__void.getCPtr(displayNumber), SWIGTYPE_p_f_p_q_const__char_p_q_const__char__void.getCPtr(setDisplayLabelColor), SWIGTYPE_p_f_long_p_q_const__char__void.getCPtr(highlight));
  }

  public static tc_strings tc_getAnnotation(int o) {
    return new tc_strings(tinkercellJNI.tc_getAnnotation(o), true);
  }

  public static void tc_setAnnotation(int o, tc_strings annot) {
    tinkercellJNI.tc_setAnnotation(o, tc_strings.getCPtr(annot), annot);
  }

  public static void tc_NameFamily_api_initialize(SWIGTYPE_p_f_long__tc_strings tc_getAnnotation0, SWIGTYPE_p_f_long_tc_strings__void tc_setAnnotation0) {
    tinkercellJNI.tc_NameFamily_api_initialize(SWIGTYPE_p_f_long__tc_strings.getCPtr(tc_getAnnotation0), SWIGTYPE_p_f_long_tc_strings__void.getCPtr(tc_setAnnotation0));
  }

  public static tc_items tc_partsIn(int o) {
    return new tc_items(tinkercellJNI.tc_partsIn(o), true);
  }

  public static tc_items tc_partsUpstream(int o) {
    return new tc_items(tinkercellJNI.tc_partsUpstream(o), true);
  }

  public static tc_items tc_partsDownstream(int o) {
    return new tc_items(tinkercellJNI.tc_partsDownstream(o), true);
  }

  public static void tc_alignParts(tc_items a) {
    tinkercellJNI.tc_alignParts(tc_items.getCPtr(a), a);
  }

  public static void tc_alignPartsOnPlasmid(int arg0, tc_items arg1) {
    tinkercellJNI.tc_alignPartsOnPlasmid(arg0, tc_items.getCPtr(arg1), arg1);
  }

  public static void tc_setSequence(int o, String arg1) {
    tinkercellJNI.tc_setSequence(o, arg1);
  }

  public static void tc_AutoGeneRegulatoryTool_api(SWIGTYPE_p_f_long__tc_items f1, SWIGTYPE_p_f_long__tc_items f2, SWIGTYPE_p_f_long__tc_items f3, SWIGTYPE_p_f_tc_items__void f4, SWIGTYPE_p_f_long_tc_items__void f5) {
    tinkercellJNI.tc_AutoGeneRegulatoryTool_api(SWIGTYPE_p_f_long__tc_items.getCPtr(f1), SWIGTYPE_p_f_long__tc_items.getCPtr(f2), SWIGTYPE_p_f_long__tc_items.getCPtr(f3), SWIGTYPE_p_f_tc_items__void.getCPtr(f4), SWIGTYPE_p_f_long_tc_items__void.getCPtr(f5));
  }

  public static void tc_exportSBML(String file) {
    tinkercellJNI.tc_exportSBML(file);
  }

  public static void tc_importSBML(String file) {
    tinkercellJNI.tc_importSBML(file);
  }

  public static void tc_SBML_api(SWIGTYPE_p_f_p_q_const__char__void exportSBML, SWIGTYPE_p_f_p_q_const__char__void importSBML) {
    tinkercellJNI.tc_SBML_api(SWIGTYPE_p_f_p_q_const__char__void.getCPtr(exportSBML), SWIGTYPE_p_f_p_q_const__char__void.getCPtr(importSBML));
  }

  public static tc_matrix tc_simulateDeterministic(double startTime, double endTime, int numSteps) {
    return new tc_matrix(tinkercellJNI.tc_simulateDeterministic(startTime, endTime, numSteps), true);
  }

  public static tc_matrix tc_simulateStochastic(double startTime, double endTime, int numSteps) {
    return new tc_matrix(tinkercellJNI.tc_simulateStochastic(startTime, endTime, numSteps), true);
  }

  public static tc_matrix tc_simulateHybrid(double startTime, double endTime, int numSteps) {
    return new tc_matrix(tinkercellJNI.tc_simulateHybrid(startTime, endTime, numSteps), true);
  }

  public static tc_matrix tc_simulateTauLeap(double startTime, double endTime, int numSteps) {
    return new tc_matrix(tinkercellJNI.tc_simulateTauLeap(startTime, endTime, numSteps), true);
  }

  public static tc_matrix tc_getSteadyState() {
    return new tc_matrix(tinkercellJNI.tc_getSteadyState(), true);
  }

  public static tc_matrix tc_steadyStateScan(String param, double start, double end, int numSteps) {
    return new tc_matrix(tinkercellJNI.tc_steadyStateScan(param, start, end, numSteps), true);
  }

  public static tc_matrix tc_steadyStateScan2D(String param1, double start1, double end1, int numSteps1, String param2, double start2, double end2, int numSteps2) {
    return new tc_matrix(tinkercellJNI.tc_steadyStateScan2D(param1, start1, end1, numSteps1, param2, start2, end2, numSteps2), true);
  }

  public static tc_matrix tc_getJacobian() {
    return new tc_matrix(tinkercellJNI.tc_getJacobian(), true);
  }

  public static tc_matrix tc_getEigenvalues() {
    return new tc_matrix(tinkercellJNI.tc_getEigenvalues(), true);
  }

  public static tc_matrix tc_getUnscaledElasticities() {
    return new tc_matrix(tinkercellJNI.tc_getUnscaledElasticities(), true);
  }

  public static tc_matrix tc_getUnscaledConcentrationCC() {
    return new tc_matrix(tinkercellJNI.tc_getUnscaledConcentrationCC(), true);
  }

  public static tc_matrix tc_getUnscaledFluxCC() {
    return new tc_matrix(tinkercellJNI.tc_getUnscaledFluxCC(), true);
  }

  public static tc_matrix tc_getScaledElasticities() {
    return new tc_matrix(tinkercellJNI.tc_getScaledElasticities(), true);
  }

  public static tc_matrix tc_getScaledConcentrationCC() {
    return new tc_matrix(tinkercellJNI.tc_getScaledConcentrationCC(), true);
  }

  public static tc_matrix tc_getScaledFluxCC() {
    return new tc_matrix(tinkercellJNI.tc_getScaledFluxCC(), true);
  }

  public static tc_matrix tc_reducedStoichiometry() {
    return new tc_matrix(tinkercellJNI.tc_reducedStoichiometry(), true);
  }

  public static tc_matrix tc_elementaryFluxModes() {
    return new tc_matrix(tinkercellJNI.tc_elementaryFluxModes(), true);
  }

  public static tc_matrix tc_LMatrix() {
    return new tc_matrix(tinkercellJNI.tc_LMatrix(), true);
  }

  public static tc_matrix tc_KMatrix() {
    return new tc_matrix(tinkercellJNI.tc_KMatrix(), true);
  }

  public static tc_matrix tc_optimize(String formulaOrFile) {
    return new tc_matrix(tinkercellJNI.tc_optimize(formulaOrFile), true);
  }

  public static void tc_COPASI_api(SWIGTYPE_p_f_double_double_int__tc_matrix simulateDeterministic, SWIGTYPE_p_f_double_double_int__tc_matrix simulateStochastic, SWIGTYPE_p_f_double_double_int__tc_matrix simulateHybrid, SWIGTYPE_p_f_double_double_int__tc_matrix simulateTauLeap, SWIGTYPE_p_f___tc_matrix getSteadyState, SWIGTYPE_p_f_p_q_const__char_double_double_int__tc_matrix steadyStateScan, SWIGTYPE_p_f_p_q_const__char_double_double_int_p_q_const__char_double_double_int__tc_matrix steadyStateScan2D, SWIGTYPE_p_f___tc_matrix getJacobian, SWIGTYPE_p_f___tc_matrix getEigenvalues, SWIGTYPE_p_f___tc_matrix getUnscaledElasticities, SWIGTYPE_p_f___tc_matrix getUnscaledConcentrationCC, SWIGTYPE_p_f___tc_matrix getUnscaledFluxCC, SWIGTYPE_p_f___tc_matrix getScaledElasticities, SWIGTYPE_p_f___tc_matrix getScaledConcentrationCC, SWIGTYPE_p_f___tc_matrix getScaledFluxCC, SWIGTYPE_p_f___tc_matrix tc_reducedStoichiometry, SWIGTYPE_p_f___tc_matrix tc_emf, SWIGTYPE_p_f___tc_matrix tc_Lmat, SWIGTYPE_p_f___tc_matrix tc_Kmat, SWIGTYPE_p_f_p_q_const__char__tc_matrix gaoptim) {
    tinkercellJNI.tc_COPASI_api(SWIGTYPE_p_f_double_double_int__tc_matrix.getCPtr(simulateDeterministic), SWIGTYPE_p_f_double_double_int__tc_matrix.getCPtr(simulateStochastic), SWIGTYPE_p_f_double_double_int__tc_matrix.getCPtr(simulateHybrid), SWIGTYPE_p_f_double_double_int__tc_matrix.getCPtr(simulateTauLeap), SWIGTYPE_p_f___tc_matrix.getCPtr(getSteadyState), SWIGTYPE_p_f_p_q_const__char_double_double_int__tc_matrix.getCPtr(steadyStateScan), SWIGTYPE_p_f_p_q_const__char_double_double_int_p_q_const__char_double_double_int__tc_matrix.getCPtr(steadyStateScan2D), SWIGTYPE_p_f___tc_matrix.getCPtr(getJacobian), SWIGTYPE_p_f___tc_matrix.getCPtr(getEigenvalues), SWIGTYPE_p_f___tc_matrix.getCPtr(getUnscaledElasticities), SWIGTYPE_p_f___tc_matrix.getCPtr(getUnscaledConcentrationCC), SWIGTYPE_p_f___tc_matrix.getCPtr(getUnscaledFluxCC), SWIGTYPE_p_f___tc_matrix.getCPtr(getScaledElasticities), SWIGTYPE_p_f___tc_matrix.getCPtr(getScaledConcentrationCC), SWIGTYPE_p_f___tc_matrix.getCPtr(getScaledFluxCC), SWIGTYPE_p_f___tc_matrix.getCPtr(tc_reducedStoichiometry), SWIGTYPE_p_f___tc_matrix.getCPtr(tc_emf), SWIGTYPE_p_f___tc_matrix.getCPtr(tc_Lmat), SWIGTYPE_p_f___tc_matrix.getCPtr(tc_Kmat), SWIGTYPE_p_f_p_q_const__char__tc_matrix.getCPtr(gaoptim));
  }

  public static void tc_substituteModel(int item, String filename) {
    tinkercellJNI.tc_substituteModel(item, filename);
  }

  public static void tc_substituteEmptyModel(int item) {
    tinkercellJNI.tc_substituteEmptyModel(item);
  }

  public static void tc_substituteOriginalModel(int item) {
    tinkercellJNI.tc_substituteOriginalModel(item);
  }

  public static tc_strings tc_listOfPossibleModels(int item) {
    return new tc_strings(tinkercellJNI.tc_listOfPossibleModels(item), true);
  }

  public static void tc_ModuleTool_api(SWIGTYPE_p_f_long_p_q_const__char__void substituteModel, SWIGTYPE_p_f_long__tc_strings listOfModels) {
    tinkercellJNI.tc_ModuleTool_api(SWIGTYPE_p_f_long_p_q_const__char__void.getCPtr(substituteModel), SWIGTYPE_p_f_long__tc_strings.getCPtr(listOfModels));
  }

}
