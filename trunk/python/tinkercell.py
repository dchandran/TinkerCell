# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tinkercell', [dirname(__file__)])
        except ImportError:
            import _tinkercell
            return _tinkercell
        if fp is not None:
            try:
                _mod = imp.load_module('_tinkercell', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tinkercell = swig_import_helper()
    del swig_import_helper
else:
    import _tinkercell
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class ArrayOfStrings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayOfStrings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayOfStrings, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _tinkercell.ArrayOfStrings_length_set
    __swig_getmethods__["length"] = _tinkercell.ArrayOfStrings_length_get
    if _newclass:length = _swig_property(_tinkercell.ArrayOfStrings_length_get, _tinkercell.ArrayOfStrings_length_set)
    __swig_setmethods__["strings"] = _tinkercell.ArrayOfStrings_strings_set
    __swig_getmethods__["strings"] = _tinkercell.ArrayOfStrings_strings_get
    if _newclass:strings = _swig_property(_tinkercell.ArrayOfStrings_strings_get, _tinkercell.ArrayOfStrings_strings_set)
    def __init__(self): 
        this = _tinkercell.new_ArrayOfStrings()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinkercell.delete_ArrayOfStrings
    __del__ = lambda self : None;
ArrayOfStrings_swigregister = _tinkercell.ArrayOfStrings_swigregister
ArrayOfStrings_swigregister(ArrayOfStrings)

class ArrayOfItems(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayOfItems, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayOfItems, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _tinkercell.ArrayOfItems_length_set
    __swig_getmethods__["length"] = _tinkercell.ArrayOfItems_length_get
    if _newclass:length = _swig_property(_tinkercell.ArrayOfItems_length_get, _tinkercell.ArrayOfItems_length_set)
    __swig_setmethods__["items"] = _tinkercell.ArrayOfItems_items_set
    __swig_getmethods__["items"] = _tinkercell.ArrayOfItems_items_get
    if _newclass:items = _swig_property(_tinkercell.ArrayOfItems_items_get, _tinkercell.ArrayOfItems_items_set)
    def __init__(self): 
        this = _tinkercell.new_ArrayOfItems()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinkercell.delete_ArrayOfItems
    __del__ = lambda self : None;
ArrayOfItems_swigregister = _tinkercell.ArrayOfItems_swigregister
ArrayOfItems_swigregister(ArrayOfItems)

class TableOfReals(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableOfReals, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableOfReals, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rows"] = _tinkercell.TableOfReals_rows_set
    __swig_getmethods__["rows"] = _tinkercell.TableOfReals_rows_get
    if _newclass:rows = _swig_property(_tinkercell.TableOfReals_rows_get, _tinkercell.TableOfReals_rows_set)
    __swig_setmethods__["cols"] = _tinkercell.TableOfReals_cols_set
    __swig_getmethods__["cols"] = _tinkercell.TableOfReals_cols_get
    if _newclass:cols = _swig_property(_tinkercell.TableOfReals_cols_get, _tinkercell.TableOfReals_cols_set)
    __swig_setmethods__["values"] = _tinkercell.TableOfReals_values_set
    __swig_getmethods__["values"] = _tinkercell.TableOfReals_values_get
    if _newclass:values = _swig_property(_tinkercell.TableOfReals_values_get, _tinkercell.TableOfReals_values_set)
    __swig_setmethods__["rownames"] = _tinkercell.TableOfReals_rownames_set
    __swig_getmethods__["rownames"] = _tinkercell.TableOfReals_rownames_get
    if _newclass:rownames = _swig_property(_tinkercell.TableOfReals_rownames_get, _tinkercell.TableOfReals_rownames_set)
    __swig_setmethods__["colnames"] = _tinkercell.TableOfReals_colnames_set
    __swig_getmethods__["colnames"] = _tinkercell.TableOfReals_colnames_get
    if _newclass:colnames = _swig_property(_tinkercell.TableOfReals_colnames_get, _tinkercell.TableOfReals_colnames_set)
    def __init__(self): 
        this = _tinkercell.new_TableOfReals()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinkercell.delete_TableOfReals
    __del__ = lambda self : None;
TableOfReals_swigregister = _tinkercell.TableOfReals_swigregister
TableOfReals_swigregister(TableOfReals)

class TableOfStrings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableOfStrings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableOfStrings, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rows"] = _tinkercell.TableOfStrings_rows_set
    __swig_getmethods__["rows"] = _tinkercell.TableOfStrings_rows_get
    if _newclass:rows = _swig_property(_tinkercell.TableOfStrings_rows_get, _tinkercell.TableOfStrings_rows_set)
    __swig_setmethods__["cols"] = _tinkercell.TableOfStrings_cols_set
    __swig_getmethods__["cols"] = _tinkercell.TableOfStrings_cols_get
    if _newclass:cols = _swig_property(_tinkercell.TableOfStrings_cols_get, _tinkercell.TableOfStrings_cols_set)
    __swig_setmethods__["strings"] = _tinkercell.TableOfStrings_strings_set
    __swig_getmethods__["strings"] = _tinkercell.TableOfStrings_strings_get
    if _newclass:strings = _swig_property(_tinkercell.TableOfStrings_strings_get, _tinkercell.TableOfStrings_strings_set)
    __swig_setmethods__["rownames"] = _tinkercell.TableOfStrings_rownames_set
    __swig_getmethods__["rownames"] = _tinkercell.TableOfStrings_rownames_get
    if _newclass:rownames = _swig_property(_tinkercell.TableOfStrings_rownames_get, _tinkercell.TableOfStrings_rownames_set)
    __swig_setmethods__["colnames"] = _tinkercell.TableOfStrings_colnames_set
    __swig_getmethods__["colnames"] = _tinkercell.TableOfStrings_colnames_get
    if _newclass:colnames = _swig_property(_tinkercell.TableOfStrings_colnames_get, _tinkercell.TableOfStrings_colnames_set)
    def __init__(self): 
        this = _tinkercell.new_TableOfStrings()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinkercell.delete_TableOfStrings
    __del__ = lambda self : None;
TableOfStrings_swigregister = _tinkercell.TableOfStrings_swigregister
TableOfStrings_swigregister(TableOfStrings)


def newMatrix(*args):
  return _tinkercell.newMatrix(*args)
newMatrix = _tinkercell.newMatrix

def newTableOfStrings(*args):
  return _tinkercell.newTableOfStrings(*args)
newTableOfStrings = _tinkercell.newTableOfStrings

def newArrayOfStrings(*args):
  return _tinkercell.newArrayOfStrings(*args)
newArrayOfStrings = _tinkercell.newArrayOfStrings

def newArrayOfItems(*args):
  return _tinkercell.newArrayOfItems(*args)
newArrayOfItems = _tinkercell.newArrayOfItems

def getValue(*args):
  return _tinkercell.getValue(*args)
getValue = _tinkercell.getValue

def setValue(*args):
  return _tinkercell.setValue(*args)
setValue = _tinkercell.setValue

def getRowName(*args):
  return _tinkercell.getRowName(*args)
getRowName = _tinkercell.getRowName

def setRowName(*args):
  return _tinkercell.setRowName(*args)
setRowName = _tinkercell.setRowName

def getColumnName(*args):
  return _tinkercell.getColumnName(*args)
getColumnName = _tinkercell.getColumnName

def setColumnName(*args):
  return _tinkercell.setColumnName(*args)
setColumnName = _tinkercell.setColumnName

def getString(*args):
  return _tinkercell.getString(*args)
getString = _tinkercell.getString

def setString(*args):
  return _tinkercell.setString(*args)
setString = _tinkercell.setString

def nthString(*args):
  return _tinkercell.nthString(*args)
nthString = _tinkercell.nthString

def setNthString(*args):
  return _tinkercell.setNthString(*args)
setNthString = _tinkercell.setNthString

def nthItem(*args):
  return _tinkercell.nthItem(*args)
nthItem = _tinkercell.nthItem

def setNthItem(*args):
  return _tinkercell.setNthItem(*args)
setNthItem = _tinkercell.setNthItem

def deleteMatrix(*args):
  return _tinkercell.deleteMatrix(*args)
deleteMatrix = _tinkercell.deleteMatrix

def deleteTableOfStrings(*args):
  return _tinkercell.deleteTableOfStrings(*args)
deleteTableOfStrings = _tinkercell.deleteTableOfStrings

def deleteArrayOfItems(*args):
  return _tinkercell.deleteArrayOfItems(*args)
deleteArrayOfItems = _tinkercell.deleteArrayOfItems

def deleteArrayOfStrings(*args):
  return _tinkercell.deleteArrayOfStrings(*args)
deleteArrayOfStrings = _tinkercell.deleteArrayOfStrings

def cbind(*args):
  return _tinkercell.cbind(*args)
cbind = _tinkercell.cbind

def rbind(*args):
  return _tinkercell.rbind(*args)
rbind = _tinkercell.rbind

def tc_allItems():
  return _tinkercell.tc_allItems()
tc_allItems = _tinkercell.tc_allItems

def tc_selectedItems():
  return _tinkercell.tc_selectedItems()
tc_selectedItems = _tinkercell.tc_selectedItems

def tc_itemsOfFamily(*args):
  return _tinkercell.tc_itemsOfFamily(*args)
tc_itemsOfFamily = _tinkercell.tc_itemsOfFamily

def tc_itemsOfFamilyFrom(*args):
  return _tinkercell.tc_itemsOfFamilyFrom(*args)
tc_itemsOfFamilyFrom = _tinkercell.tc_itemsOfFamilyFrom

def tc_find(*args):
  return _tinkercell.tc_find(*args)
tc_find = _tinkercell.tc_find

def tc_findItems(*args):
  return _tinkercell.tc_findItems(*args)
tc_findItems = _tinkercell.tc_findItems

def tc_select(*args):
  return _tinkercell.tc_select(*args)
tc_select = _tinkercell.tc_select

def tc_deselect():
  return _tinkercell.tc_deselect()
tc_deselect = _tinkercell.tc_deselect

def tc_getName(*args):
  return _tinkercell.tc_getName(*args)
tc_getName = _tinkercell.tc_getName

def tc_getUniqueName(*args):
  return _tinkercell.tc_getUniqueName(*args)
tc_getUniqueName = _tinkercell.tc_getUniqueName

def tc_rename(*args):
  return _tinkercell.tc_rename(*args)
tc_rename = _tinkercell.tc_rename

def tc_getNames(*args):
  return _tinkercell.tc_getNames(*args)
tc_getNames = _tinkercell.tc_getNames

def tc_getUniqueNames(*args):
  return _tinkercell.tc_getUniqueNames(*args)
tc_getUniqueNames = _tinkercell.tc_getUniqueNames

def tc_getFamily(*args):
  return _tinkercell.tc_getFamily(*args)
tc_getFamily = _tinkercell.tc_getFamily

def tc_isA(*args):
  return _tinkercell.tc_isA(*args)
tc_isA = _tinkercell.tc_isA

def tc_print(*args):
  return _tinkercell.tc_print(*args)
tc_print = _tinkercell.tc_print

def tc_errorReport(*args):
  return _tinkercell.tc_errorReport(*args)
tc_errorReport = _tinkercell.tc_errorReport

def tc_printTable(*args):
  return _tinkercell.tc_printTable(*args)
tc_printTable = _tinkercell.tc_printTable

def tc_printFile(*args):
  return _tinkercell.tc_printFile(*args)
tc_printFile = _tinkercell.tc_printFile

def tc_clear():
  return _tinkercell.tc_clear()
tc_clear = _tinkercell.tc_clear

def tc_remove(*args):
  return _tinkercell.tc_remove(*args)
tc_remove = _tinkercell.tc_remove

def tc_getY(*args):
  return _tinkercell.tc_getY(*args)
tc_getY = _tinkercell.tc_getY

def tc_getX(*args):
  return _tinkercell.tc_getX(*args)
tc_getX = _tinkercell.tc_getX

def tc_getPos(*args):
  return _tinkercell.tc_getPos(*args)
tc_getPos = _tinkercell.tc_getPos

def tc_setPos(*args):
  return _tinkercell.tc_setPos(*args)
tc_setPos = _tinkercell.tc_setPos

def tc_setPosMulti(*args):
  return _tinkercell.tc_setPosMulti(*args)
tc_setPosMulti = _tinkercell.tc_setPosMulti

def tc_moveSelected(*args):
  return _tinkercell.tc_moveSelected(*args)
tc_moveSelected = _tinkercell.tc_moveSelected

def tc_isWindows():
  return _tinkercell.tc_isWindows()
tc_isWindows = _tinkercell.tc_isWindows

def tc_isMac():
  return _tinkercell.tc_isMac()
tc_isMac = _tinkercell.tc_isMac

def tc_isLinux():
  return _tinkercell.tc_isLinux()
tc_isLinux = _tinkercell.tc_isLinux

def tc_appDir():
  return _tinkercell.tc_appDir()
tc_appDir = _tinkercell.tc_appDir

def tc_createInputWindowFromFile(*args):
  return _tinkercell.tc_createInputWindowFromFile(*args)
tc_createInputWindowFromFile = _tinkercell.tc_createInputWindowFromFile

def tc_createInputWindow(*args):
  return _tinkercell.tc_createInputWindow(*args)
tc_createInputWindow = _tinkercell.tc_createInputWindow

def tc_addInputWindowOptions(*args):
  return _tinkercell.tc_addInputWindowOptions(*args)
tc_addInputWindowOptions = _tinkercell.tc_addInputWindowOptions

def tc_addInputWindowCheckbox(*args):
  return _tinkercell.tc_addInputWindowCheckbox(*args)
tc_addInputWindowCheckbox = _tinkercell.tc_addInputWindowCheckbox

def tc_openNewWindow(*args):
  return _tinkercell.tc_openNewWindow(*args)
tc_openNewWindow = _tinkercell.tc_openNewWindow

def tc_getChildren(*args):
  return _tinkercell.tc_getChildren(*args)
tc_getChildren = _tinkercell.tc_getChildren

def tc_getParent(*args):
  return _tinkercell.tc_getParent(*args)
tc_getParent = _tinkercell.tc_getParent

def tc_getNumericalData(*args):
  return _tinkercell.tc_getNumericalData(*args)
tc_getNumericalData = _tinkercell.tc_getNumericalData

def tc_setNumericalData(*args):
  return _tinkercell.tc_setNumericalData(*args)
tc_setNumericalData = _tinkercell.tc_setNumericalData

def tc_getTextData(*args):
  return _tinkercell.tc_getTextData(*args)
tc_getTextData = _tinkercell.tc_getTextData

def tc_setTextData(*args):
  return _tinkercell.tc_setTextData(*args)
tc_setTextData = _tinkercell.tc_setTextData

def tc_getNumericalDataNames(*args):
  return _tinkercell.tc_getNumericalDataNames(*args)
tc_getNumericalDataNames = _tinkercell.tc_getNumericalDataNames

def tc_getTextDataNames(*args):
  return _tinkercell.tc_getTextDataNames(*args)
tc_getTextDataNames = _tinkercell.tc_getTextDataNames

def tc_zoom(*args):
  return _tinkercell.tc_zoom(*args)
tc_zoom = _tinkercell.tc_zoom

def tc_getString(*args):
  return _tinkercell.tc_getString(*args)
tc_getString = _tinkercell.tc_getString

def tc_getFilename():
  return _tinkercell.tc_getFilename()
tc_getFilename = _tinkercell.tc_getFilename

def tc_getStringFromList(*args):
  return _tinkercell.tc_getStringFromList(*args)
tc_getStringFromList = _tinkercell.tc_getStringFromList

def tc_getNumber(*args):
  return _tinkercell.tc_getNumber(*args)
tc_getNumber = _tinkercell.tc_getNumber

def tc_getNumbers(*args):
  return _tinkercell.tc_getNumbers(*args)
tc_getNumbers = _tinkercell.tc_getNumbers

def tc_askQuestion(*args):
  return _tinkercell.tc_askQuestion(*args)
tc_askQuestion = _tinkercell.tc_askQuestion

def tc_messageDialog(*args):
  return _tinkercell.tc_messageDialog(*args)
tc_messageDialog = _tinkercell.tc_messageDialog

def tc_thisThread():
  return _tinkercell.tc_thisThread()
tc_thisThread = _tinkercell.tc_thisThread

def tc_createSliders(*args):
  return _tinkercell.tc_createSliders(*args)
tc_createSliders = _tinkercell.tc_createSliders

def tc_getColor(*args):
  return _tinkercell.tc_getColor(*args)
tc_getColor = _tinkercell.tc_getColor

def tc_setColor(*args):
  return _tinkercell.tc_setColor(*args)
tc_setColor = _tinkercell.tc_setColor

def tc_changeNodeImage(*args):
  return _tinkercell.tc_changeNodeImage(*args)
tc_changeNodeImage = _tinkercell.tc_changeNodeImage

def tc_changeArrowHead(*args):
  return _tinkercell.tc_changeArrowHead(*args)
tc_changeArrowHead = _tinkercell.tc_changeArrowHead

def tc_setSize(*args):
  return _tinkercell.tc_setSize(*args)
tc_setSize = _tinkercell.tc_setSize

def tc_getWidth(*args):
  return _tinkercell.tc_getWidth(*args)
tc_getWidth = _tinkercell.tc_getWidth

def tc_getHeight(*args):
  return _tinkercell.tc_getHeight(*args)
tc_getHeight = _tinkercell.tc_getHeight

def tc_setAngle(*args):
  return _tinkercell.tc_setAngle(*args)
tc_setAngle = _tinkercell.tc_setAngle

def tc_getAngle(*args):
  return _tinkercell.tc_getAngle(*args)
tc_getAngle = _tinkercell.tc_getAngle

def tc_Main_api_initialize(*args):
  return _tinkercell.tc_Main_api_initialize(*args)
tc_Main_api_initialize = _tinkercell.tc_Main_api_initialize

def tc_showProgress(*args):
  return _tinkercell.tc_showProgress(*args)
tc_showProgress = _tinkercell.tc_showProgress

def tc_CThread_api_initialize(*args):
  return _tinkercell.tc_CThread_api_initialize(*args)
tc_CThread_api_initialize = _tinkercell.tc_CThread_api_initialize

def tc_getParameters(*args):
  return _tinkercell.tc_getParameters(*args)
tc_getParameters = _tinkercell.tc_getParameters

def tc_getInitialValues(*args):
  return _tinkercell.tc_getInitialValues(*args)
tc_getInitialValues = _tinkercell.tc_getInitialValues

def tc_setInitialValues(*args):
  return _tinkercell.tc_setInitialValues(*args)
tc_setInitialValues = _tinkercell.tc_setInitialValues

def tc_getFixedVariables(*args):
  return _tinkercell.tc_getFixedVariables(*args)
tc_getFixedVariables = _tinkercell.tc_getFixedVariables

def tc_getParametersAndFixedVariables(*args):
  return _tinkercell.tc_getParametersAndFixedVariables(*args)
tc_getParametersAndFixedVariables = _tinkercell.tc_getParametersAndFixedVariables

def tc_getTextAttribute(*args):
  return _tinkercell.tc_getTextAttribute(*args)
tc_getTextAttribute = _tinkercell.tc_getTextAttribute

def tc_getParameter(*args):
  return _tinkercell.tc_getParameter(*args)
tc_getParameter = _tinkercell.tc_getParameter

def tc_getParametersNamed(*args):
  return _tinkercell.tc_getParametersNamed(*args)
tc_getParametersNamed = _tinkercell.tc_getParametersNamed

def tc_getParametersExcept(*args):
  return _tinkercell.tc_getParametersExcept(*args)
tc_getParametersExcept = _tinkercell.tc_getParametersExcept

def tc_getAllTextNamed(*args):
  return _tinkercell.tc_getAllTextNamed(*args)
tc_getAllTextNamed = _tinkercell.tc_getAllTextNamed

def tc_setTextAttribute(*args):
  return _tinkercell.tc_setTextAttribute(*args)
tc_setTextAttribute = _tinkercell.tc_setTextAttribute

def tc_setParameter(*args):
  return _tinkercell.tc_setParameter(*args)
tc_setParameter = _tinkercell.tc_setParameter

def tc_BasicInformationTool_Text_api(*args):
  return _tinkercell.tc_BasicInformationTool_Text_api(*args)
tc_BasicInformationTool_Text_api = _tinkercell.tc_BasicInformationTool_Text_api

def tc_BasicInformationTool_Numeric_api(*args):
  return _tinkercell.tc_BasicInformationTool_Numeric_api(*args)
tc_BasicInformationTool_Numeric_api = _tinkercell.tc_BasicInformationTool_Numeric_api

def tc_insertConnection(*args):
  return _tinkercell.tc_insertConnection(*args)
tc_insertConnection = _tinkercell.tc_insertConnection

def tc_getConnectedNodes(*args):
  return _tinkercell.tc_getConnectedNodes(*args)
tc_getConnectedNodes = _tinkercell.tc_getConnectedNodes

def tc_getConnectedNodesIn(*args):
  return _tinkercell.tc_getConnectedNodesIn(*args)
tc_getConnectedNodesIn = _tinkercell.tc_getConnectedNodesIn

def tc_getConnectedNodesOut(*args):
  return _tinkercell.tc_getConnectedNodesOut(*args)
tc_getConnectedNodesOut = _tinkercell.tc_getConnectedNodesOut

def tc_getConnectedNodesOther(*args):
  return _tinkercell.tc_getConnectedNodesOther(*args)
tc_getConnectedNodesOther = _tinkercell.tc_getConnectedNodesOther

def tc_getConnections(*args):
  return _tinkercell.tc_getConnections(*args)
tc_getConnections = _tinkercell.tc_getConnections

def tc_getConnectionsIn(*args):
  return _tinkercell.tc_getConnectionsIn(*args)
tc_getConnectionsIn = _tinkercell.tc_getConnectionsIn

def tc_getConnectionsOut(*args):
  return _tinkercell.tc_getConnectionsOut(*args)
tc_getConnectionsOut = _tinkercell.tc_getConnectionsOut

def tc_getConnectionsOther(*args):
  return _tinkercell.tc_getConnectionsOther(*args)
tc_getConnectionsOther = _tinkercell.tc_getConnectionsOther

def tc_ConnectionInsertion_api(*args):
  return _tinkercell.tc_ConnectionInsertion_api(*args)
tc_ConnectionInsertion_api = _tinkercell.tc_ConnectionInsertion_api

def tc_getControlPointX(*args):
  return _tinkercell.tc_getControlPointX(*args)
tc_getControlPointX = _tinkercell.tc_getControlPointX

def tc_getControlPointY(*args):
  return _tinkercell.tc_getControlPointY(*args)
tc_getControlPointY = _tinkercell.tc_getControlPointY

def tc_setControlPoint(*args):
  return _tinkercell.tc_setControlPoint(*args)
tc_setControlPoint = _tinkercell.tc_setControlPoint

def tc_setCenterPoint(*args):
  return _tinkercell.tc_setCenterPoint(*args)
tc_setCenterPoint = _tinkercell.tc_setCenterPoint

def tc_getCenterPointX(*args):
  return _tinkercell.tc_getCenterPointX(*args)
tc_getCenterPointX = _tinkercell.tc_getCenterPointX

def tc_getCenterPointY(*args):
  return _tinkercell.tc_getCenterPointY(*args)
tc_getCenterPointY = _tinkercell.tc_getCenterPointY

def tc_setStraight(*args):
  return _tinkercell.tc_setStraight(*args)
tc_setStraight = _tinkercell.tc_setStraight

def tc_setAllStraight(*args):
  return _tinkercell.tc_setAllStraight(*args)
tc_setAllStraight = _tinkercell.tc_setAllStraight

def tc_setLineWidth(*args):
  return _tinkercell.tc_setLineWidth(*args)
tc_setLineWidth = _tinkercell.tc_setLineWidth

def tc_ConnectionSelection_api(*args):
  return _tinkercell.tc_ConnectionSelection_api(*args)
tc_ConnectionSelection_api = _tinkercell.tc_ConnectionSelection_api

def tc_merge(*args):
  return _tinkercell.tc_merge(*args)
tc_merge = _tinkercell.tc_merge

def tc_separate(*args):
  return _tinkercell.tc_separate(*args)
tc_separate = _tinkercell.tc_separate

def tc_GroupHandlerTool_api(*args):
  return _tinkercell.tc_GroupHandlerTool_api(*args)
tc_GroupHandlerTool_api = _tinkercell.tc_GroupHandlerTool_api

def tc_insert(*args):
  return _tinkercell.tc_insert(*args)
tc_insert = _tinkercell.tc_insert

def tc_NodeInsertion_api(*args):
  return _tinkercell.tc_NodeInsertion_api(*args)
tc_NodeInsertion_api = _tinkercell.tc_NodeInsertion_api

def tc_getStoichiometry(*args):
  return _tinkercell.tc_getStoichiometry(*args)
tc_getStoichiometry = _tinkercell.tc_getStoichiometry

def tc_setStoichiometry(*args):
  return _tinkercell.tc_setStoichiometry(*args)
tc_setStoichiometry = _tinkercell.tc_setStoichiometry

def tc_getRates(*args):
  return _tinkercell.tc_getRates(*args)
tc_getRates = _tinkercell.tc_getRates

def tc_setRates(*args):
  return _tinkercell.tc_setRates(*args)
tc_setRates = _tinkercell.tc_setRates

def tc_getStoichiometryFor(*args):
  return _tinkercell.tc_getStoichiometryFor(*args)
tc_getStoichiometryFor = _tinkercell.tc_getStoichiometryFor

def tc_getRate(*args):
  return _tinkercell.tc_getRate(*args)
tc_getRate = _tinkercell.tc_getRate

def tc_setRate(*args):
  return _tinkercell.tc_setRate(*args)
tc_setRate = _tinkercell.tc_setRate

def tc_setStoichiometryFor(*args):
  return _tinkercell.tc_setStoichiometryFor(*args)
tc_setStoichiometryFor = _tinkercell.tc_setStoichiometryFor

def tc_StoichiometryTool_api(*args):
  return _tinkercell.tc_StoichiometryTool_api(*args)
tc_StoichiometryTool_api = _tinkercell.tc_StoichiometryTool_api

def tc_compileAndRun(*args):
  return _tinkercell.tc_compileAndRun(*args)
tc_compileAndRun = _tinkercell.tc_compileAndRun

def tc_compileBuildLoad(*args):
  return _tinkercell.tc_compileBuildLoad(*args)
tc_compileBuildLoad = _tinkercell.tc_compileBuildLoad

def tc_compileBuildLoadSliders(*args):
  return _tinkercell.tc_compileBuildLoadSliders(*args)
tc_compileBuildLoadSliders = _tinkercell.tc_compileBuildLoadSliders

def tc_runPythonCode(*args):
  return _tinkercell.tc_runPythonCode(*args)
tc_runPythonCode = _tinkercell.tc_runPythonCode

def tc_runPythonFile(*args):
  return _tinkercell.tc_runPythonFile(*args)
tc_runPythonFile = _tinkercell.tc_runPythonFile

def tc_addPythonPlugin(*args):
  return _tinkercell.tc_addPythonPlugin(*args)
tc_addPythonPlugin = _tinkercell.tc_addPythonPlugin

def tc_callFunction(*args):
  return _tinkercell.tc_callFunction(*args)
tc_callFunction = _tinkercell.tc_callFunction

def tc_loadLibrary(*args):
  return _tinkercell.tc_loadLibrary(*args)
tc_loadLibrary = _tinkercell.tc_loadLibrary

def tc_addFunction(*args):
  return _tinkercell.tc_addFunction(*args)
tc_addFunction = _tinkercell.tc_addFunction

def tc_callback(*args):
  return _tinkercell.tc_callback(*args)
tc_callback = _tinkercell.tc_callback

def tc_callWhenExiting(*args):
  return _tinkercell.tc_callWhenExiting(*args)
tc_callWhenExiting = _tinkercell.tc_callWhenExiting

def tc_DynamicLibraryMenu_api(*args):
  return _tinkercell.tc_DynamicLibraryMenu_api(*args)
tc_DynamicLibraryMenu_api = _tinkercell.tc_DynamicLibraryMenu_api

def tc_LoadCLibraries_api(*args):
  return _tinkercell.tc_LoadCLibraries_api(*args)
tc_LoadCLibraries_api = _tinkercell.tc_LoadCLibraries_api

def tc_PythonTool_api(*args):
  return _tinkercell.tc_PythonTool_api(*args)
tc_PythonTool_api = _tinkercell.tc_PythonTool_api

def tc_OctaveTool_api(*args):
  return _tinkercell.tc_OctaveTool_api(*args)
tc_OctaveTool_api = _tinkercell.tc_OctaveTool_api

def tc_surface(*args):
  return _tinkercell.tc_surface(*args)
tc_surface = _tinkercell.tc_surface

def tc_plot(*args):
  return _tinkercell.tc_plot(*args)
tc_plot = _tinkercell.tc_plot

def tc_scatterplot(*args):
  return _tinkercell.tc_scatterplot(*args)
tc_scatterplot = _tinkercell.tc_scatterplot

def tc_errorBars(*args):
  return _tinkercell.tc_errorBars(*args)
tc_errorBars = _tinkercell.tc_errorBars

def tc_hist(*args):
  return _tinkercell.tc_hist(*args)
tc_hist = _tinkercell.tc_hist

def tc_multiplot(*args):
  return _tinkercell.tc_multiplot(*args)
tc_multiplot = _tinkercell.tc_multiplot

def tc_getPlotData(*args):
  return _tinkercell.tc_getPlotData(*args)
tc_getPlotData = _tinkercell.tc_getPlotData

def tc_gnuplot(*args):
  return _tinkercell.tc_gnuplot(*args)
tc_gnuplot = _tinkercell.tc_gnuplot

def tc_PlotTool_api(*args):
  return _tinkercell.tc_PlotTool_api(*args)
tc_PlotTool_api = _tinkercell.tc_PlotTool_api

def tc_writeModel(*args):
  return _tinkercell.tc_writeModel(*args)
tc_writeModel = _tinkercell.tc_writeModel

def tc_ModelFileGenerator_api(*args):
  return _tinkercell.tc_ModelFileGenerator_api(*args)
tc_ModelFileGenerator_api = _tinkercell.tc_ModelFileGenerator_api

def tc_getEventTriggers():
  return _tinkercell.tc_getEventTriggers()
tc_getEventTriggers = _tinkercell.tc_getEventTriggers

def tc_getEventResponses():
  return _tinkercell.tc_getEventResponses()
tc_getEventResponses = _tinkercell.tc_getEventResponses

def tc_addEvent(*args):
  return _tinkercell.tc_addEvent(*args)
tc_addEvent = _tinkercell.tc_addEvent

def tc_SimulationEventsTool_api(*args):
  return _tinkercell.tc_SimulationEventsTool_api(*args)
tc_SimulationEventsTool_api = _tinkercell.tc_SimulationEventsTool_api

def tc_getForcingFunctionNames(*args):
  return _tinkercell.tc_getForcingFunctionNames(*args)
tc_getForcingFunctionNames = _tinkercell.tc_getForcingFunctionNames

def tc_getForcingFunctionAssignments(*args):
  return _tinkercell.tc_getForcingFunctionAssignments(*args)
tc_getForcingFunctionAssignments = _tinkercell.tc_getForcingFunctionAssignments

def tc_addForcingFunction(*args):
  return _tinkercell.tc_addForcingFunction(*args)
tc_addForcingFunction = _tinkercell.tc_addForcingFunction

def tc_AssignmentFunctionsTool_api(*args):
  return _tinkercell.tc_AssignmentFunctionsTool_api(*args)
tc_AssignmentFunctionsTool_api = _tinkercell.tc_AssignmentFunctionsTool_api

def tc_displayText(*args):
  return _tinkercell.tc_displayText(*args)
tc_displayText = _tinkercell.tc_displayText

def tc_displayNumber(*args):
  return _tinkercell.tc_displayNumber(*args)
tc_displayNumber = _tinkercell.tc_displayNumber

def tc_setDisplayLabelColor(*args):
  return _tinkercell.tc_setDisplayLabelColor(*args)
tc_setDisplayLabelColor = _tinkercell.tc_setDisplayLabelColor

def tc_highlight(*args):
  return _tinkercell.tc_highlight(*args)
tc_highlight = _tinkercell.tc_highlight

def tc_CLabelsTool_api(*args):
  return _tinkercell.tc_CLabelsTool_api(*args)
tc_CLabelsTool_api = _tinkercell.tc_CLabelsTool_api

def tc_getAnnotation(*args):
  return _tinkercell.tc_getAnnotation(*args)
tc_getAnnotation = _tinkercell.tc_getAnnotation

def tc_setAnnotation(*args):
  return _tinkercell.tc_setAnnotation(*args)
tc_setAnnotation = _tinkercell.tc_setAnnotation

def tc_NameFamily_api_initialize(*args):
  return _tinkercell.tc_NameFamily_api_initialize(*args)
tc_NameFamily_api_initialize = _tinkercell.tc_NameFamily_api_initialize

def tc_partsIn(*args):
  return _tinkercell.tc_partsIn(*args)
tc_partsIn = _tinkercell.tc_partsIn

def tc_partsUpstream(*args):
  return _tinkercell.tc_partsUpstream(*args)
tc_partsUpstream = _tinkercell.tc_partsUpstream

def tc_partsDownstream(*args):
  return _tinkercell.tc_partsDownstream(*args)
tc_partsDownstream = _tinkercell.tc_partsDownstream

def tc_alignParts(*args):
  return _tinkercell.tc_alignParts(*args)
tc_alignParts = _tinkercell.tc_alignParts

def tc_AutoGeneRegulatoryTool_api(*args):
  return _tinkercell.tc_AutoGeneRegulatoryTool_api(*args)
tc_AutoGeneRegulatoryTool_api = _tinkercell.tc_AutoGeneRegulatoryTool_api

def tc_loadSBMLString(*args):
  return _tinkercell.tc_loadSBMLString(*args)
tc_loadSBMLString = _tinkercell.tc_loadSBMLString

def tc_loadAntimonyString(*args):
  return _tinkercell.tc_loadAntimonyString(*args)
tc_loadAntimonyString = _tinkercell.tc_loadAntimonyString

def tc_loadSBMLFile(*args):
  return _tinkercell.tc_loadSBMLFile(*args)
tc_loadSBMLFile = _tinkercell.tc_loadSBMLFile

def tc_loadAntimonyFile(*args):
  return _tinkercell.tc_loadAntimonyFile(*args)
tc_loadAntimonyFile = _tinkercell.tc_loadAntimonyFile

def tc_getSBMLString(*args):
  return _tinkercell.tc_getSBMLString(*args)
tc_getSBMLString = _tinkercell.tc_getSBMLString

def tc_getAntimonyString(*args):
  return _tinkercell.tc_getAntimonyString(*args)
tc_getAntimonyString = _tinkercell.tc_getAntimonyString

def tc_writeSBMLFile(*args):
  return _tinkercell.tc_writeSBMLFile(*args)
tc_writeSBMLFile = _tinkercell.tc_writeSBMLFile

def tc_writeAntimonyFile(*args):
  return _tinkercell.tc_writeAntimonyFile(*args)
tc_writeAntimonyFile = _tinkercell.tc_writeAntimonyFile

def tc_Antimony_api(*args):
  return _tinkercell.tc_Antimony_api(*args)
tc_Antimony_api = _tinkercell.tc_Antimony_api


def toItems(array):
    n = len(array);
    A = newArrayOfItems(n);
    for i in range(0, n):
        setNthItem(A, i, array[i]);

    return A;

def fromItems(array):
    n = array.length;
    A = range(0,n);
    for i in range(0, n):
        A[i] = nthItem(array,i);

    deleteArrayOfItems(array);
    return A;

def toStrings(array):
    n = len(array);
    A = newArrayOfStrings(n);
    for i in range(0, n):
        setNthString(A, i, array[i]);

    return A;

def fromStrings(array):
    n = array.length;
    A = range(0,n);
    for i in range(0, n):
        A[i] = nthString(array,i);

    deleteArrayOfStrings(array);
    return A;

def fromMatrix(matrix, row_wise = False):
    n = matrix.rows;
    m = matrix.cols;
    cols = fromStrings(matrix.colnames);
    rows = fromStrings(matrix.rownames);
    if row_wise:
        A = range(0,n);
        for i in range(0, n):
            A[i] = range(0,m);
            for j in range(0,m):
                A[i][j] = getValue(matrix,i,j);
    else:
        A = range(0,m);
        for i in range(0, m):
            A[i] = range(0,n);
            for j in range(0,n):
                A[i][j] = getValue(matrix,j,i);

    deleteMatrix(matrix);
    return [rows, cols, A];

def toMatrix(lists, row_wise = False , rows = [], cols = []):
    n = len(lists);
    m = len(lists[0]);
    if row_wise:
        A = newMatrix(n,m);
    else:
        A = newMatrix(m,n);
    for i in range(0, n):
        for j in range(0,m):
            if row_wise:
                setNthValue(matrix,i,j,lists[i][j]);
            else:
                setNthValue(matrix,j,i,lists[i][j]);
    n = len(rows);
    m = len(cols);

    for i in range(0,n):
        setRowName(matrix,i,rows[i]);

    for i in range(0,m):
        setColName(matrix,i,cols[i]);

    return A;

def toHex(r,g,b):
    hexchars = "0123456789ABCDEF0";
    return "#" + hexchars[r / 16] + hexchars[r % 16] + hexchars[g / 16] + hexchars[g % 16] + hexchars[b / 16] + hexchars[b % 16];
def toItems(array):
    n = len(array);
    A = newArrayOfItems(n);
    for i in range(0, n):
        setNthItem(A, i, array[i]);

    return A;

def fromItems(array):
    n = array.length;
    A = range(0,n);
    for i in range(0, n):
        A[i] = nthItem(array,i);

    deleteArrayOfItems(array);
    return A;

def toStrings(array):
    n = len(array);
    A = newArrayOfStrings(n);
    for i in range(0, n):
        setNthString(A, i, array[i]);

    return A;

def fromStrings(array):
    n = array.length;
    A = range(0,n);
    for i in range(0, n):
        A[i] = nthString(array,i);

    deleteArrayOfStrings(array);
    return A;

def fromMatrix(matrix, row_wise = False):
    n = matrix.rows;
    m = matrix.cols;
    cols = fromStrings(matrix.colnames);
    rows = fromStrings(matrix.rownames);
    if row_wise:
        A = range(0,n);
        for i in range(0, n):
            A[i] = range(0,m);
            for j in range(0,m):
                A[i][j] = getValue(matrix,i,j);
    else:
        A = range(0,m);
        for i in range(0, m):
            A[i] = range(0,n);
            for j in range(0,n):
                A[i][j] = getValue(matrix,j,i);

    deleteMatrix(matrix);
    return [rows, cols, A];

def toMatrix(lists, row_wise = False , rows = [], cols = []):
    n = len(lists);
    m = len(lists[0]);
    if row_wise:
        A = newMatrix(n,m);
    else:
        A = newMatrix(m,n);
    for i in range(0, n):
        for j in range(0,m):
            if row_wise:
                setNthValue(matrix,i,j,lists[i][j]);
            else:
                setNthValue(matrix,j,i,lists[i][j]);
    n = len(rows);
    m = len(cols);

    for i in range(0,n):
        setRowName(matrix,i,rows[i]);

    for i in range(0,m):
        setColName(matrix,i,cols[i]);

    return A;

def toHex(r,g,b):
    hexchars = "0123456789ABCDEF0";
    return "#" + hexchars[r / 16] + hexchars[r % 16] + hexchars[g / 16] + hexchars[g % 16] + hexchars[b / 16] + hexchars[b % 16];
